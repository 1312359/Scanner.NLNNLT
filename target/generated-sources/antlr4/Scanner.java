// Generated from Scanner.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Scanner extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		COMMENT=1, INTLITERAL=2, CHARLITERAL=3, STRINGLITERAL=4, BOOLEANLITERAL=5, 
		KEYWORD=6, IDENTIFIER=7, OPERATION=8, FLOAT=9, NOTIDENTIFIER=10, WS=11;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'"
	};
	public static final String[] ruleNames = {
		"COMMENT", "INTLITERAL", "HEX", "CHARLITERAL", "STRINGLITERAL", "BOOLEANLITERAL", 
		"KEYWORD", "IDENTIFIER", "OPERATION", "FLOAT", "NOTIDENTIFIER", "LETTER", 
		"DIGIT", "ESC", "WS"
	};


	public Scanner(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Scanner.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\r\u0129\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\3\2\3\2\3\2\3\2\7"+
		"\2&\n\2\f\2\16\2)\13\2\3\2\3\2\3\2\3\2\3\2\7\2\60\n\2\f\2\16\2\63\13\2"+
		"\3\2\3\2\5\2\67\n\2\3\2\3\2\3\3\6\3<\n\3\r\3\16\3=\3\3\3\3\3\3\3\3\6\3"+
		"D\n\3\r\3\16\3E\5\3H\n\3\3\4\3\4\5\4L\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\5\5Z\n\5\3\6\3\6\3\6\7\6_\n\6\f\6\16\6b\13\6\3\6"+
		"\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7o\n\7\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00a7\n\b"+
		"\3\t\6\t\u00aa\n\t\r\t\16\t\u00ab\3\t\3\t\6\t\u00b0\n\t\r\t\16\t\u00b1"+
		"\3\t\6\t\u00b5\n\t\r\t\16\t\u00b6\3\t\3\t\3\t\6\t\u00bc\n\t\r\t\16\t\u00bd"+
		"\3\t\3\t\6\t\u00c2\n\t\r\t\16\t\u00c3\3\t\6\t\u00c7\n\t\r\t\16\t\u00c8"+
		"\3\t\6\t\u00cc\n\t\r\t\16\t\u00cd\3\t\6\t\u00d1\n\t\r\t\16\t\u00d2\3\t"+
		"\6\t\u00d6\n\t\r\t\16\t\u00d7\3\t\6\t\u00db\n\t\r\t\16\t\u00dc\3\t\6\t"+
		"\u00e0\n\t\r\t\16\t\u00e1\3\t\3\t\5\t\u00e6\n\t\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u00f8\n\n\3\13\6\13\u00fb"+
		"\n\13\r\13\16\13\u00fc\3\13\3\13\7\13\u0101\n\13\f\13\16\13\u0104\13\13"+
		"\3\13\3\13\6\13\u0108\n\13\r\13\16\13\u0109\5\13\u010c\n\13\3\13\3\13"+
		"\3\f\6\f\u0111\n\f\r\f\16\f\u0112\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3"+
		"\17\3\17\3\17\3\17\5\17\u0121\n\17\3\20\6\20\u0124\n\20\r\20\16\20\u0125"+
		"\3\20\3\20\5\'\61`\2\21\3\3\5\4\7\2\t\5\13\6\r\7\17\b\21\t\23\n\25\13"+
		"\27\f\31\2\33\2\35\2\37\r\3\2\t\4\2CHch\6\2$$^^ppvv\b\2*+..<=??]]__\7"+
		"\2\'\',-//\61\61>>\4\2}}\177\177\4\2C\\c|\5\2\13\f\16\17\"\"\u015b\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2"+
		"\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\37\3\2\2\2\3\66"+
		"\3\2\2\2\5G\3\2\2\2\7K\3\2\2\2\tY\3\2\2\2\13[\3\2\2\2\rn\3\2\2\2\17\u00a6"+
		"\3\2\2\2\21\u00e5\3\2\2\2\23\u00f7\3\2\2\2\25\u010b\3\2\2\2\27\u0110\3"+
		"\2\2\2\31\u0118\3\2\2\2\33\u011a\3\2\2\2\35\u0120\3\2\2\2\37\u0123\3\2"+
		"\2\2!\"\7\61\2\2\"#\7\61\2\2#\'\3\2\2\2$&\13\2\2\2%$\3\2\2\2&)\3\2\2\2"+
		"\'(\3\2\2\2\'%\3\2\2\2(*\3\2\2\2)\'\3\2\2\2*\67\7\f\2\2+,\7\61\2\2,-\7"+
		",\2\2-\61\3\2\2\2.\60\13\2\2\2/.\3\2\2\2\60\63\3\2\2\2\61\62\3\2\2\2\61"+
		"/\3\2\2\2\62\64\3\2\2\2\63\61\3\2\2\2\64\65\7,\2\2\65\67\7\61\2\2\66!"+
		"\3\2\2\2\66+\3\2\2\2\678\3\2\2\289\b\2\2\29\4\3\2\2\2:<\5\33\16\2;:\3"+
		"\2\2\2<=\3\2\2\2=;\3\2\2\2=>\3\2\2\2>H\3\2\2\2?@\7\62\2\2@A\7z\2\2AC\3"+
		"\2\2\2BD\5\7\4\2CB\3\2\2\2DE\3\2\2\2EC\3\2\2\2EF\3\2\2\2FH\3\2\2\2G;\3"+
		"\2\2\2G?\3\2\2\2H\6\3\2\2\2IL\5\33\16\2JL\t\2\2\2KI\3\2\2\2KJ\3\2\2\2"+
		"L\b\3\2\2\2MN\7)\2\2NO\5\31\r\2OP\7)\2\2PZ\3\2\2\2QR\7)\2\2RS\7^\2\2S"+
		"T\t\3\2\2TZ\7)\2\2UV\7)\2\2VW\5\33\16\2WX\7)\2\2XZ\3\2\2\2YM\3\2\2\2Y"+
		"Q\3\2\2\2YU\3\2\2\2Z\n\3\2\2\2[`\7$\2\2\\_\5\35\17\2]_\13\2\2\2^\\\3\2"+
		"\2\2^]\3\2\2\2_b\3\2\2\2`a\3\2\2\2`^\3\2\2\2ac\3\2\2\2b`\3\2\2\2cd\7$"+
		"\2\2d\f\3\2\2\2ef\7v\2\2fg\7t\2\2gh\7w\2\2ho\7g\2\2ij\7h\2\2jk\7c\2\2"+
		"kl\7n\2\2lm\7u\2\2mo\7g\2\2ne\3\2\2\2ni\3\2\2\2o\16\3\2\2\2pq\7d\2\2q"+
		"r\7q\2\2rs\7q\2\2st\7n\2\2tu\7g\2\2uv\7c\2\2v\u00a7\7p\2\2wx\7e\2\2xy"+
		"\7c\2\2yz\7n\2\2z{\7n\2\2{|\7q\2\2|}\7w\2\2}\u00a7\7v\2\2~\177\7e\2\2"+
		"\177\u0080\7n\2\2\u0080\u0081\7c\2\2\u0081\u0082\7u\2\2\u0082\u00a7\7"+
		"u\2\2\u0083\u0084\7g\2\2\u0084\u0085\7n\2\2\u0085\u0086\7u\2\2\u0086\u00a7"+
		"\7g\2\2\u0087\u0088\7k\2\2\u0088\u00a7\7h\2\2\u0089\u008a\7d\2\2\u008a"+
		"\u008b\7t\2\2\u008b\u008c\7g\2\2\u008c\u008d\7c\2\2\u008d\u00a7\7m\2\2"+
		"\u008e\u008f\7h\2\2\u008f\u0090\7q\2\2\u0090\u00a7\7t\2\2\u0091\u0092"+
		"\7k\2\2\u0092\u0093\7p\2\2\u0093\u00a7\7v\2\2\u0094\u0095\7t\2\2\u0095"+
		"\u0096\7g\2\2\u0096\u0097\7v\2\2\u0097\u0098\7w\2\2\u0098\u0099\7t\2\2"+
		"\u0099\u00a7\7p\2\2\u009a\u009b\7x\2\2\u009b\u009c\7q\2\2\u009c\u009d"+
		"\7k\2\2\u009d\u00a7\7f\2\2\u009e\u009f\7e\2\2\u009f\u00a0\7q\2\2\u00a0"+
		"\u00a1\7p\2\2\u00a1\u00a2\7v\2\2\u00a2\u00a3\7k\2\2\u00a3\u00a4\7p\2\2"+
		"\u00a4\u00a5\7w\2\2\u00a5\u00a7\7g\2\2\u00a6p\3\2\2\2\u00a6w\3\2\2\2\u00a6"+
		"~\3\2\2\2\u00a6\u0083\3\2\2\2\u00a6\u0087\3\2\2\2\u00a6\u0089\3\2\2\2"+
		"\u00a6\u008e\3\2\2\2\u00a6\u0091\3\2\2\2\u00a6\u0094\3\2\2\2\u00a6\u009a"+
		"\3\2\2\2\u00a6\u009e\3\2\2\2\u00a7\20\3\2\2\2\u00a8\u00aa\5\31\r\2\u00a9"+
		"\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2"+
		"\2\2\u00ac\u00e6\3\2\2\2\u00ad\u00af\7a\2\2\u00ae\u00b0\5\31\r\2\u00af"+
		"\u00ae\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2"+
		"\2\2\u00b2\u00e6\3\2\2\2\u00b3\u00b5\5\31\r\2\u00b4\u00b3\3\2\2\2\u00b5"+
		"\u00b6\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b8\3\2"+
		"\2\2\u00b8\u00b9\7a\2\2\u00b9\u00e6\3\2\2\2\u00ba\u00bc\5\31\r\2\u00bb"+
		"\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be\3\2"+
		"\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c1\7a\2\2\u00c0\u00c2\5\31\r\2\u00c1"+
		"\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4\3\2"+
		"\2\2\u00c4\u00e6\3\2\2\2\u00c5\u00c7\5\31\r\2\u00c6\u00c5\3\2\2\2\u00c7"+
		"\u00c8\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cb\3\2"+
		"\2\2\u00ca\u00cc\5\33\16\2\u00cb\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd"+
		"\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00e6\3\2\2\2\u00cf\u00d1\5\31"+
		"\r\2\u00d0\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2"+
		"\u00d3\3\2\2\2\u00d3\u00d5\3\2\2\2\u00d4\u00d6\5\33\16\2\u00d5\u00d4\3"+
		"\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8"+
		"\u00da\3\2\2\2\u00d9\u00db\5\31\r\2\u00da\u00d9\3\2\2\2\u00db\u00dc\3"+
		"\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e6\3\2\2\2\u00de"+
		"\u00e0\5\31\r\2\u00df\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00df\3"+
		"\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\5\21\t\2\u00e4"+
		"\u00e6\3\2\2\2\u00e5\u00a9\3\2\2\2\u00e5\u00ad\3\2\2\2\u00e5\u00b4\3\2"+
		"\2\2\u00e5\u00bb\3\2\2\2\u00e5\u00c6\3\2\2\2\u00e5\u00d0\3\2\2\2\u00e5"+
		"\u00df\3\2\2\2\u00e6\22\3\2\2\2\u00e7\u00f8\t\4\2\2\u00e8\u00e9\7?\2\2"+
		"\u00e9\u00f8\7?\2\2\u00ea\u00f8\t\5\2\2\u00eb\u00ec\7>\2\2\u00ec\u00f8"+
		"\7?\2\2\u00ed\u00f8\7@\2\2\u00ee\u00ef\7@\2\2\u00ef\u00f8\7?\2\2\u00f0"+
		"\u00f1\7#\2\2\u00f1\u00f8\7?\2\2\u00f2\u00f3\7(\2\2\u00f3\u00f8\7(\2\2"+
		"\u00f4\u00f5\7~\2\2\u00f5\u00f8\7~\2\2\u00f6\u00f8\t\6\2\2\u00f7\u00e7"+
		"\3\2\2\2\u00f7\u00e8\3\2\2\2\u00f7\u00ea\3\2\2\2\u00f7\u00eb\3\2\2\2\u00f7"+
		"\u00ed\3\2\2\2\u00f7\u00ee\3\2\2\2\u00f7\u00f0\3\2\2\2\u00f7\u00f2\3\2"+
		"\2\2\u00f7\u00f4\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\24\3\2\2\2\u00f9\u00fb"+
		"\5\33\16\2\u00fa\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fa\3\2\2\2"+
		"\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0102\7.\2\2\u00ff\u0101"+
		"\5\33\16\2\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2"+
		"\u0102\u0103\3\2\2\2\u0103\u010c\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u0107"+
		"\7\60\2\2\u0106\u0108\5\33\16\2\u0107\u0106\3\2\2\2\u0108\u0109\3\2\2"+
		"\2\u0109\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u00fa"+
		"\3\2\2\2\u010b\u0105\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e\b\13\2\2"+
		"\u010e\26\3\2\2\2\u010f\u0111\5\31\r\2\u0110\u010f\3\2\2\2\u0111\u0112"+
		"\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\3\2\2\2\u0114"+
		"\u0115\7\60\2\2\u0115\u0116\3\2\2\2\u0116\u0117\b\f\2\2\u0117\30\3\2\2"+
		"\2\u0118\u0119\t\7\2\2\u0119\32\3\2\2\2\u011a\u011b\4\62;\2\u011b\34\3"+
		"\2\2\2\u011c\u011d\7^\2\2\u011d\u0121\7$\2\2\u011e\u011f\7^\2\2\u011f"+
		"\u0121\7^\2\2\u0120\u011c\3\2\2\2\u0120\u011e\3\2\2\2\u0121\36\3\2\2\2"+
		"\u0122\u0124\t\b\2\2\u0123\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0123"+
		"\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\b\20\2\2"+
		"\u0128 \3\2\2\2#\2\'\61\66=EGKY^`n\u00a6\u00ab\u00b1\u00b6\u00bd\u00c3"+
		"\u00c8\u00cd\u00d2\u00d7\u00dc\u00e1\u00e5\u00f7\u00fc\u0102\u0109\u010b"+
		"\u0112\u0120\u0125\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}